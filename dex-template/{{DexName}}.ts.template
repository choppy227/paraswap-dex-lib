import { Interface, JsonFragment } from '@ethersproject/abi';
import { JsonRpcProvider } from '@ethersproject/providers';
import { SwapSide } from '../constants';
import {
  AdapterExchangeParam,
  Address,
  SimpleExchangeParam,
} from '../types';
import { IDex } from './idex';
import { SimpleExchange } from './simple-exchange';
import {{DexName}}ABI from '../abi/{{DexName}}.json';

export type {{DexName}}Data = {
    exchange: string; // _DOUBLE_CHECK_
};
type {{DexName}}Param = [

];
enum {{DexName}}Functions {

}

export class {{DexName}}
  extends SimpleExchange
  implements IDex<{{DexName}}Data, {{DexName}}Param>
{
  static dexKeys = [
    // _TO_FILL_UP_
  ];
  exchangeRouterInterface: Interface;

  constructor(augustusAddress: Address, private network: number, provider: JsonRpcProvider,) {
    super(augustusAddress, provider);
    this.exchangeRouterInterface = new Interface({{DexName}}ABI as JsonFragment[]);
  }

  const {{DexNameCamel}} = new {{DexName}}(param1, param2);

  getAdapterParam(
    srcToken: string,
    destToken: string,
    srcAmount: string,
    destAmount: string,
    data: {{DexName}}Data,
    side: SwapSide,
  ): AdapterExchangeParam {
    if (side === SwapSide.BUY) throw new Error(`Buy not supported`); // _DOUBLE_CHECK_

    const { /** _DESTRUCTURE_PARAMS_IF_NEEDED_ */} = data;
    const payload = this.abiCoder.encodeParameter(
      {
       // _TO_FILL_UP_
      },
      data, // _DOUBLE_CHECK_
    );

    return {
      targetExchange: data.exchange,
      payload,
      networkFee: '0', // _TO_SET_
    };
  }

  async getSimpleParam(
    srcToken: string,
    destToken: string,
    srcAmount: string,
    destAmount: string,
    data: {{DexName}}Data,
    side: SwapSide,
  ): Promise<SimpleExchangeParam> {
    if (side === SwapSide.BUY) throw new Error(`Buy not supported`); // _DOUBLE_CHECK_

    const swapFunction = '_TO_FILL_UP_';
    const swapFunctionParams: {{DexName}}Param = [/* _TO_FILL_UP_ */];
    const swapData = this.exchangeRouterInterface.encodeFunctionData(
      swapFunction,
      swapFunctionParams,
    );

    return this.buildSimpleParamWithoutWETHConversion(
      srcToken,
      srcAmount,
      destToken,
      destAmount,
      swapData,
      data.exchange, // _DOUBLE_CHECK_
    );
  }
}
